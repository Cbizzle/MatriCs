//Transpose 2x2
int transpose2(int[2, 2] mat) {
	int i;
	int j;
	int k;
	int l;
	int m;
	int n;

	int [4] vec1;
	int [4] vec2;

	int count1;
	int count2;
	int count3;

	int [2, 2] tr;

	count1 = 0;
	for(i = 0; i < 2; i = i + 1) {
		for(j = 0; j < 2; j = j + 1) {
			vec1[count1] = mat[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 2; k = k + 1) {
		for(l = 0; l < 2; l = l + 1) {
			vec2[count2] = vec1[k + l*2];
			count2 = count2 + 1;
		}
	}

	count3 = 0;
	for(m = 0; m < 2; m = m + 1) {
		for(n = 0; n < 2; n = n + 1) {
			tr[m, n] = vec2[count3];
			count3 = count3 + 1;
		}
	}
	return 0;
}

//Tranpose 3x3
int transpose3(int [3, 3] mat) {
	int i;
	int j;
	int k;
	int l;
	int m;
	int n;

	int [9] vec1;
	int [9] vec2;

	int count1;
	int count2;
	int count3;

	int [3, 3] tr;

	count1 = 0;
	for(i = 0; i < 3; i = i + 1) {
		for(j = 0; j < 3; j = j + 1) {
			vec1[count1] = mat[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 3; k = k + 1) {
		for(l = 0; l < 3; l = l + 1) {
			vec2[count2] = vec1[k + l*3];
			count2 = count2 + 1;
		}
	}

	count3 = 0;
	for(m = 0; m < 3; m = m + 1) {
		for(n = 0; n < 3; n = n + 1) {
			tr[m, n] = vec2[count3];
			count3 = count3 + 1;
		}
	}
	return 0;
}

//Tranpose 4x4
int transpose4(int [4, 4] mat) {
	int i;
	int j;
	int k;
	int l;
	int m;
	int n;

	int [16] vec1;
	int [16] vec2;

	int count1;
	int count2;
	int count3;

	int [4, 4] tr;

	count1 = 0;
	for(i = 0; i < 4; i = i + 1) {
		for(j = 0; j < 4; j = j + 1) {
			vec1[count1] = mat[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 4; k = k + 1) {
		for(l = 0; l < 4; l = l + 1) {
			vec2[count2] = vec1[k + l*4];
			count2 = count2 + 1;
		}
	}

	count3 = 0;
	for(m = 0; m < 4; m = m + 1) {
		for(n = 0; n < 4; n = n + 1) {
			tr[m, n] = vec2[count3];
			count3 = count3 + 1;
		}
	}
	return 0;
}

// Transpose 5x5
int transpose5(int [5, 5] mat) {
	int i;
	int j;
	int k;
	int l;
	int m;
	int n;

	int [25] vec1;
	int [25] vec2;

	int count1;
	int count2;
	int count3;

	int [5, 5] tr;

	count1 = 0;
	for(i = 0; i < 5; i = i + 1) {
		for(j = 0; j < 5; j = j + 1) {
			vec1[count1] = mat[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 5; k = k + 1) {
		for(l = 0; l < 5; l = l + 1) {
			vec2[count2] = vec1[k + l*5];
			count2 = count2 + 1;
		}
	}

	count3 = 0;
	for(m = 0; m < 5; m = m + 1) {
		for(n = 0; n < 5; n = n + 1) {
			tr[m, n] = vec2[count3];
			count3 = count3 + 1;
		}
	}
	return 0;
}

// Add 2-D Matrices
int add2(int [2, 2] mat1, int [2, 2] mat2) {
	int[4] a_flat;
	int[4] b_flat;
	int[4] d_flat;
	int[2, 2] add_mat;

	int i;
	int j;
	int k;
	int l;
	int m;

	int count1;
	int count2;
	int count3;

	count1 = 0;
	for(i = 0; i < 2; i = i + 1) {
		for(j = 0; j < 2; j = j + 1) {
			a_flat[count1] = mat1[i, j];
			b_flat[count1] = mat2[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 4; k = k + 1) {
		d_flat[count2] = a_flat[count2] + b_flat[count2];
		count2 = count2 + 1; 
	}

	count3 = 0;
	for(l = 0; l < 2; l = l + 1) {
		for(m = 0; m < 2; m = m + 1) {
			add_mat[l, m] = d_flat[count3];
			count3 = count3 + 1;
		}
	}

	return 0;
}

int add3(int [3, 3] mat1, int [3, 3] mat2) {
	int[9] a_flat;
	int[9] b_flat;
	int[9] d_flat;
	int[3, 3] add_mat;

	int i;
	int j;
	int k;
	int l;
	int m;

	int count1;
	int count2;
	int count3;

	count1 = 0;
	for(i = 0; i < 3; i = i + 1) {
		for(j = 0; j < 3; j = j + 1) {
			a_flat[count1] = mat1[i, j];
			b_flat[count1] = mat2[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 9; k = k + 1) {
		d_flat[count2] = a_flat[count2] + b_flat[count2];
		count2 = count2 + 1; 
	}

	count3 = 0;
	for(l = 0; l < 3; l = l + 1) {
		for(m = 0; m < 3; m = m + 1) {
			add_mat[l, m] = d_flat[count3];
			count3 = count3 + 1;
		}
	}

	return 0;
}

int add4(int [4, 4] mat1, int [4, 4] mat2) {
	int[16] a_flat;
	int[16] b_flat;
	int[16] d_flat;
	int[4, 4] add_mat;

	int i;
	int j;
	int k;
	int l;
	int m;

	int count1;
	int count2;
	int count3;

	count1 = 0;
	for(i = 0; i < 4; i = i + 1) {
		for(j = 0; j < 4; j = j + 1) {
			a_flat[count1] = mat1[i, j];
			b_flat[count1] = mat2[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 16; k = k + 1) {
		d_flat[count2] = a_flat[count2] + b_flat[count2];
		count2 = count2 + 1; 
	}

	count3 = 0;
	for(l = 0; l < 4; l = l + 1) {
		for(m = 0; m < 4; m = m + 1) {
			add_mat[l, m] = d_flat[count3];
			count3 = count3 + 1;
		}
	}

	return 0;
}

int add5(int [5, 5] mat1, int [5, 5] mat2) {
	int[25] a_flat;
	int[25] b_flat;
	int[25] d_flat;
	int[5, 5] add_mat;

	int i;
	int j;
	int k;
	int l;
	int m;

	int count1;
	int count2;
	int count3;

	count1 = 0;
	for(i = 0; i < 5; i = i + 1) {
		for(j = 0; j < 5; j = j + 1) {
			a_flat[count1] = mat1[i, j];
			b_flat[count1] = mat2[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 25; k = k + 1) {
		d_flat[count2] = a_flat[count2] + b_flat[count2];
		count2 = count2 + 1; 
	}

	count3 = 0;
	for(l = 0; l < 5; l = l + 1) {
		for(m = 0; m < 5; m = m + 1) {
			add_mat[l, m] = d_flat[count3];
			count3 = count3 + 1;
		}
	}

	return 0;
}

// Subtract 2-D Matrices
int subtract2(int [2, 2] mat1, int [2, 2] mat2) {
	int[4] a_flat;
	int[4] b_flat;
	int[4] d_flat;
	int[2, 2] sub_mat;

	int i;
	int j;
	int k;
	int l;
	int m;

	int count1;
	int count2;
	int count3;

	count1 = 0;
	for(i = 0; i < 2; i = i + 1) {
		for(j = 0; j < 2; j = j + 1) {
			a_flat[count1] = mat1[i, j];
			b_flat[count1] = mat2[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 4; k = k + 1) {
		d_flat[count2] = a_flat[count2] - b_flat[count2];
		count2 = count2 + 1; 
	}

	count3 = 0;
	for(l = 0; l < 2; l = l + 1) {
		for(m = 0; m < 2; m = m + 1) {
			sub_mat[l, m] = d_flat[count3];
			count3 = count3 + 1;
		}
	}

	return 0;
} 

int subtract3(int [3, 3] mat1, int [3, 3] mat2) {
	int[9] a_flat;
	int[9] b_flat;
	int[9] d_flat;
	int[3, 3] sub_mat;

	int i;
	int j;
	int k;
	int l;
	int m;

	int count1;
	int count2;
	int count3;

	count1 = 0;
	for(i = 0; i < 3; i = i + 1) {
		for(j = 0; j < 3; j = j + 1) {
			a_flat[count1] = mat1[i, j];
			b_flat[count1] = mat2[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 9; k = k + 1) {
		d_flat[count2] = a_flat[count2] - b_flat[count2];
		count2 = count2 + 1; 
	}

	count3 = 0;
	for(l = 0; l < 3; l = l + 1) {
		for(m = 0; m < 3; m = m + 1) {
			sub_mat[l, m] = d_flat[count3];
			count3 = count3 + 1;
		}
	}

	return 0;
} 

int subtract4(int [4, 4] mat1, int [4, 4] mat2) {
	int[16] a_flat;
	int[16] b_flat;
	int[16] d_flat;
	int[4, 4] sub_mat;

	int i;
	int j;
	int k;
	int l;
	int m;

	int count1;
	int count2;
	int count3;

	count1 = 0;
	for(i = 0; i < 4; i = i + 1) {
		for(j = 0; j < 4; j = j + 1) {
			a_flat[count1] = mat1[i, j];
			b_flat[count1] = mat2[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 16; k = k + 1) {
		d_flat[count2] = a_flat[count2] - b_flat[count2];
		count2 = count2 + 1; 
	}

	count3 = 0;
	for(l = 0; l < 4; l = l + 1) {
		for(m = 0; m < 4; m = m + 1) {
			sub_mat[l, m] = d_flat[count3];
			count3 = count3 + 1;
		}
	}

	return 0;
} 

int subtract5(int [5, 5] mat1, int [5, 5] mat2) {
	int[25] a_flat;
	int[25] b_flat;
	int[25] d_flat;
	int[5, 5] sub_mat;

	int i;
	int j;
	int k;
	int l;
	int m;

	int count1;
	int count2;
	int count3;

	count1 = 0;
	for(i = 0; i < 5; i = i + 1) {
		for(j = 0; j < 5; j = j + 1) {
			a_flat[count1] = mat1[i, j];
			b_flat[count1] = mat2[i, j];
			count1 = count1 + 1;
		}
	}

	count2 = 0;
	for(k = 0; k < 25; k = k + 1) {
		d_flat[count2] = a_flat[count2] - b_flat[count2];
		count2 = count2 + 1; 
	}

	count3 = 0;
	for(l = 0; l < 5; l = l + 1) {
		for(m = 0; m < 5; m = m + 1) {
			sub_mat[l, m] = d_flat[count3];
			count3 = count3 + 1;
		}
	}

	return 0;
} 

//Identity 2x2 
int id2() {
	int i;
	int j;

	int [2, 2] mat;
	print("[");
	for(i = 0; i < 2; i = i + 1) {
		for (j = 0; j < 2; j = j + 1) {
			if(i == j) {
				mat[i, j] = 1;
				print_int(mat[i,j]);
             }
             else {
             	mat[i, j] = 0;
             	print_int(mat[i,j]);
                }
        }
}
print("]");
return 0;
}

// Identity 3x3
int id3() {
	int i;
	int j;

	int [3, 3] mat;
	print("[");
	for(i = 0; i < 3; i = i + 1) {
		for (j = 0; j < 3; j = j + 1) {
			if(i == j) {
				mat[i, j] = 1;
				print_int(mat[i,j]);
             }
             else {
             	mat[i, j] = 0;
             	print_int(mat[i,j]);
                }
        }
}
print("]");
return 0;
}

// Identity 4x4
int id4() {
	int i;
	int j;

	int [4, 4] mat;
	print("[");
	for(i = 0; i < 4; i = i + 1) {
		for (j = 0; j < 4; j = j + 1) {
			if(i == j) {
				mat[i, j] = 1;
				print_int(mat[i,j]);
             }
             else {
             	mat[i, j] = 0;
             	print_int(mat[i,j]);
                }
        }
}
print("]");
return 0;
}

// Identity 5x5
int id5() {
	int i;
	int j;

	int [5, 5] mat;
	print("[");
	for(i = 0; i < 5; i = i + 1) {
		for (j = 0; j < 5; j = j + 1) {
			if(i == j) {
				mat[i, j] = 1;
				print_int(mat[i,j]);
             }
             else {
             	mat[i, j] = 0;
             	print_int(mat[i,j]);
                }
        }
}
print("]");
return 0;
}

// Identity 6x6
int id6() {
	int i;
	int j;

	int [6, 6] mat;
	print("[");
	for(i = 0; i < 6; i = i + 1) {
		for (j = 0; j < 6; j = j + 1) {
			if(i == j) {
				mat[i, j] = 1;
				print_int(mat[i,j]);
             }
             else {
             	mat[i, j] = 0;
             	print_int(mat[i,j]);
                }
        }
}
print("]");
return 0;
}

// Identity 7x7
int id7() {
	int i;
	int j;

	int [7, 7] mat;
	print("[");
	for(i = 0; i < 7; i = i + 1) {
		for (j = 0; j < 7; j = j + 1) {
			if(i == j) {
				mat[i, j] = 1;
				print_int(mat[i,j]);
             }
             else {
             	mat[i, j] = 0;
             	print_int(mat[i,j]);
                }
        }
}
print("]");
return 0;
}

// Identity 8x8
int id8() {
	int i;
	int j;

	int [8, 8] mat;
	print("[");
	for(i = 0; i < 8; i = i + 1) {
		for (j = 0; j < 8; j = j + 1) {
			if(i == j) {
				mat[i, j] = 1;
				print_int(mat[i,j]);
             }
             else {
             	mat[i, j] = 0;
             	print_int(mat[i,j]);
                }
        }
}
print("]");
return 0;
}

// Identity 9x9
int id9() {
	int i;
	int j;

	int [9, 9] mat;
	print("[");
	for(i = 0; i < 9; i = i + 1) {
		for (j = 0; j < 9; j = j + 1) {
			if(i == j) {
				mat[i, j] = 1;
				print_int(mat[i,j]);
             }
             else {
             	mat[i, j] = 0;
             	print_int(mat[i,j]);
                }
        }
}
print("]");
return 0;
}

// Identity 10x10
int id10() {
	int i;
	int j;

	int [10, 10] mat;
	print("[");
	for(i = 0; i < 10; i = i + 1) {
		for (j = 0; j < 10; j = j + 1) {
			if(i == j) {
				mat[i, j] = 1;
				print_int(mat[i,j]);
             }
             else {
             	mat[i, j] = 0;
             	print_int(mat[i,j]);
                }
        }
}
print("]");
return 0;
}

// Print Vector Size 2
void print_vec2(int[2] a) {
	int i;
	int c;
	int counter;

	c = 2;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vec3(int[3] a) {
	int i;
	int c;
	int counter;

	c = 3;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vec4(int[4] a) {
	int i;
	int c;
	int counter;

	c = 4;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vec5(int[5] a) {
	int i;
	int c;
	int counter;

	c = 5;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vec6(int[6] a) {
	int i;
	int c;
	int counter;

	c = 6;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vec7(int[7] a) {
	int i;
	int c;
	int counter;

	c = 7;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_int(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vecf2(float[2] a) {
	int i;
	int c;
	int counter;

	c = 2;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vecf3(float[3] a) {
	int i;
	int c;
	int counter;

	c = 3;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vecf4(float[4] a) {
	int i;
	int c;
	int counter;

	c = 4;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vecf5(float[5] a) {
	int i;
	int c;
	int counter;

	c = 5;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print_vecf6(float[6] a) {
	int i;
	int c;
	int counter;

	c = 6;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

// Print Vector Size 7 float
void print_vecf7(float[7] a) {
	int i;
	int c;
	int counter;

	c = 7;
	counter = 0;
	
	print("[");
	while(c > 0) {
		if(counter == 0) {
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
		else {
			print(",");
			print_float(a[counter]);
			counter = counter + 1;
			c = c - 1;
		}
	}
	print("]"); 
}

void print3d(int[2,2,2] c) {
int i;
int j;
int k;
    for(i = 0; i < 2; i++) {
        print("[");
        for(j = 0; j < 2; j++) {
            print("[");
            for(k = 0; k < 2; k++) {
                if(k != 1) {
                    print_int(c[i,j,k]);
                    print(",");
                } else {
                    print_int(c[i,j,k]);
                }
            }
            if(j != 1) {
                print("], ");
            } else {
                print("]");
            }
        }
        print("]\n");
    }
}

